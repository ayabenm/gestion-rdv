const express = require('express');
const router = express.Router();
const Establishment = require('../models/establishmentModel');

router.get('/', async (req, res) => {
    try {
        let results;
        if (req.user.role === 'superadmin') {
            // ğŸ”“ Super admin : tous les Ã©tablissements
            results = await Establishment.getAllEstablishments();
        } else if (req.user.role === 'admin') {
            // ğŸ”’ Admin : seulement son Ã©tablissement
            const Establishment = await Establishment.getById(req.user.establishment_id);
            if (!Establishment) {
                return res.status(404).json({ error: 'Ã‰tablissement non trouvÃ©' });
            }
            results = [Establishment]; // on met dans un tableau pour garder le mÃªme format
        } else {
            return res.status(403).json({ error: 'AccÃ¨s refusÃ©' });
        }

        res.status(200).json(results);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Route pour rÃ©cupÃ©rer un Ã©tablissement par ID
router.get('/:id', async (req, res) => {
    try {
        const result = await Establishment.getById(req.params.id);
        if (!result) {
            return res.status(404).json({ error: 'Ã‰tablissement non trouvÃ©' });
        }
        res.status(200).json(result);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Route pour ajouter un Ã©tablissement
router.post('/', async (req, res) => {
    try {
        const results = await Establishment.createEstablishment(req.body);
        res.status(201).json({ message: 'Ã‰tablissement ajoutÃ©', id: results.insertId });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});


module.exports = router;